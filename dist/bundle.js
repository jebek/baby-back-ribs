!function(e){function t(n){if(i[n])return i[n].exports;var s=i[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var i={};t.m=e,t.c=i,t.d=function(e,i,n){t.o(e,i)||Object.defineProperty(e,i,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,i){if(1&i&&(e=t(e)),8&i)return e;if(4&i&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&i&&"string"!=typeof e)for(var s in e)t.d(n,s,function(t){return e[t]}.bind(null,s));return n},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t,i){var n=i(1);"string"==typeof n&&(n=[[e.i,n,""]]),i(3)(n,{insert:"head",singleton:!1}),n.locals&&(e.exports=n.locals)},function(e,t,i){(e.exports=i(2)(!1)).push([e.i,"body{margin:0;overflow:hidden}.button{position:absolute;top:30%;left:50%;transform:translate(-50%, -50%);border-radius:5px;border:2px solid black;padding:5px 20px;cursor:pointer}.hidden{display:none}.instructions{padding:20px;position:absolute}\n",""])},function(e){"use strict";function t(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var s=function(e){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t);return"/*# ".concat(i," */")}(n),o=n.sources.map(function(e){return"/*# sourceURL=".concat(n.sourceRoot).concat(e," */")});return[i].concat(o).concat([s]).join("\n")}return[i].join("\n")}e.exports=function(e){var i=[];return i.toString=function(){return this.map(function(i){var n=t(i,e);return i[2]?"@media ".concat(i[2],"{").concat(n,"}"):n}).join("")},i.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var n,s={},o=0;o<this.length;o++)null!=(n=this[o][0])&&(s[n]=!0);for(var r,a=0;a<e.length;a++)null!=(r=e[a])[0]&&s[r[0]]||(t&&!r[2]?r[2]=t:t&&(r[2]="(".concat(r[2],") and (").concat(t,")")),i.push(r))},i}},function(e,t,i){"use strict";function n(e,t){for(var i=[],n={},s=0;s<e.length;s++){var o=e[s],r=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};n[r]?n[r].parts.push(a):i.push(n[r]={id:r,parts:[a]})}return i}function s(e,t){for(var i=0;i<e.length;i++){var n=e[i],s=c[n.id],o=0;if(s){for(s.refs++;o<s.parts.length;o++)s.parts[o](n.parts[o]);for(;o<n.parts.length;o++)s.parts.push(h(n.parts[o],t))}else{for(var r=[];o<n.parts.length;o++)r.push(h(n.parts[o],t));c[n.id]={id:n.id,refs:1,parts:r}}}}function o(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var n=i.nc;n&&(e.attributes.nonce=n)}if(Object.keys(e.attributes).forEach(function(i){t.setAttribute(i,e.attributes[i])}),"function"==typeof e.insert)e.insert(t);else{var s=u(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}function r(e,t,i,n){var s=i?"":n.css;if(e.styleSheet)e.styleSheet.cssText=p(t,s);else{var o=document.createTextNode(s),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function a(e,t,i){var n=i.css,s=i.media,o=i.sourceMap;if(s&&e.setAttribute("media",s),o&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function h(e,t){var i,n,s;if(t.singleton){var h=m++;i=d||(d=o(t)),n=r.bind(null,i,h,!1),s=r.bind(null,i,h,!0)}else i=o(t),n=a.bind(null,i,t),s=function(){!function(e){null!==e.parentNode&&e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else s()}}var c={},l=function(){var e;return function(){return void 0===e&&(e=!(!(window&&document&&document.all)||window.atob)),e}}(),u=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),p=function(){var e=[];return function(t,i){return e[t]=i,e.filter(Boolean).join("\n")}}(),d=null,m=0;e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=l());var i=n(e,t);return s(i,t),function(e){for(var o=[],r=0;r<i.length;r++){var a=i[r],h=c[a.id];h&&(h.refs--,o.push(h))}e&&s(n(e,t),t);for(var l,u=0;u<o.length;u++)if(0===(l=o[u]).refs){for(var p=0;p<l.parts.length;p++)l.parts[p]();delete c[l.id]}}}},function(e,t,i){"use strict";function n(e){THREE.Curve.call(this),this.scale=void 0===e?1:e}i.r(t),i(0);class s extends THREE.Group{constructor(e,t,i){super(),this.mesh=new THREE.Mesh(e,t),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0;let n=new THREE.CylinderGeometry(2.1,2.1,.2,32),s=new THREE.MeshBasicMaterial({color:8772422}),o=new THREE.Mesh(n,s);o.position.y=.1;let r=new THREE.CylinderGeometry(2.1,2.1,.2,32),a=new THREE.MeshBasicMaterial({color:15417401}),h=new THREE.Mesh(r,a);h.position.y=-.1;let c=new THREE.CylinderGeometry(2.1,2.1,.2,32),l=new THREE.MeshBasicMaterial({color:12347450}),u=new THREE.Mesh(c,l);u.position.y=-.3,this.position.set(0,.5,i),this.add(this.mesh,o,h,u)}}var o=class{constructor(e,t,i,n,s){this.heroContainer=e,this.hero=t,this.pathLength=s.pathLength,this.group=new THREE.Group,this.group.position.x=i?i.x:0,this.group.position.y=i?i.y:0,this.group.position.z=-this.pathLength/2,this.turn=n,this.tacoDistance=s.tacoDistance,this.burgerDistances=s.burgerDistances,this.planeDistances=s.planeDistances,this.paused=!0,this.pathSegmentsLength=1}_createWall(e){const t=new THREE.BoxGeometry(20,20,2,2);let i=new THREE.MeshLambertMaterial({color:16753920,flatShading:THREE.FlatShading});this.plusOrMinus=.5>Math.random()?-1:1,this.direction=0<this.plusOrMinus?"left":"right";let n=new class{constructor(e,t,i,n){this.mesh=new THREE.Mesh(e,t),this.mesh.position.set(0,10,n),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.mesh.rotation.y=i}}(t,i,2*this.plusOrMinus,e);this.group.add(n.mesh)}_createBack(e){const t=new THREE.PolyhedronBufferGeometry([-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1],[2,1,0,0,3,2,0,4,7,7,3,0,0,1,5,5,4,0,1,2,6,6,5,1,2,3,7,7,6,2,4,5,6,6,7,4],2,2);let i=new THREE.MeshLambertMaterial({color:15702062,flatShading:THREE.FlatShading}),n=new s(t,i,50*e);this.group.add(n)}_createPlane(e){let t=new THREE.BoxGeometry(10,50,1),i=new THREE.MeshLambertMaterial({color:4459621}),n=new THREE.Mesh(t,i);n.position.z=50*e,n.rotation.x=-1.57,n.receiveShadow=!0,this.group.add(n)}init(){0!==this.planeDistances.length&&(this.group.remove(this.plane),this.planeDistances.forEach(e=>{this._createPlane(e)}),this.pathSegmentsLength=this.planeDistances.length),this._createWall(this.tacoDistance),this.burgerDistances.forEach(e=>{this._createBack(e)})}initPlane(){let e=new THREE.BoxGeometry(10,1e3,1),t=new THREE.MeshLambertMaterial({color:4459621});this.plane=new THREE.Mesh(e,t),this.plane.rotation.x=-1.57,this.plane.receiveShadow=!0,this.group.add(this.plane)}detectWall(){let e=this.walls.map(e=>e.mesh),t=new THREE.Raycaster(this.hero.mesh.position,new THREE.Vector3(0,0,-1)).intersectObjects(e);if(0<t.length&&2>t[0].distance)return!this.hero.spinning||(this.turn(),!1)}addScore(e){document.querySelector("#score").innerHTML=this.hero.score+=e}detectCollisions(){let e=new THREE.Raycaster(this.hero.mesh.position,new THREE.Vector3(0,-1,0)),t=new THREE.Raycaster(this.hero.mesh.position,new THREE.Vector3(0,0,-1)),i=this.group.children.slice(this.pathSegmentsLength).map(e=>void 0===e.mesh?e:e.mesh),n=e.intersectObjects(i),s=t.intersectObjects(i),o=this.group.children.slice(0,this.pathSegmentsLength),r=e.intersectObjects(o);if(0<r.length&&2>r[0].distance?(this.hero.spinAvailable=!0,this.heroContainer.position.y=r[0].point.y+.1):1.8>=this.hero.mesh.position.y&&(this.heroContainer.position.y-=.5),0<n.length&&2>n[0].distance)return this.hero.jump(),this.hero.spinAvailable=!0,this.addScore(5),!1;if(0<s.length&&3.5>s[0].distance){return!("BoxGeometry"===s[0].object.geometry.type)||!(this.hero.spinning&&this.direction===this.hero.spinDirection)||(this.turn(),this.addScore(10),this.hero.spinAvailable=!0,!1)}return!1}pauseGame(){this.paused=!0}playGame(){this.paused=!1}};n.prototype=Object.create(THREE.Curve.prototype),n.prototype.constructor=n,n.prototype.getPoint=function(e){var t=Math.sin(8*Math.PI*e);return new THREE.Vector3(2*e-1,t,0).multiplyScalar(this.scale)};class r extends THREE.Group{constructor(){super(),this.path=new n(10),this.geometry=new THREE.TubeGeometry(this.path,20,2,8,!1),this.material=new THREE.MeshStandardMaterial({color:14932681}),this.mesh=new THREE.Mesh(this.geometry,this.material),this.geometry2=new THREE.BoxGeometry(25,10,10),this.material2=new THREE.MeshStandardMaterial({color:9109504}),this.mesh2=new THREE.Mesh(this.geometry2,this.material2),this.mesh2.position.set(0,-1,10),this.light=new THREE.SpotLight(16777215,1.3,300,.07),this.light.position.set(0,50,200),this.light.target=this.mesh2,this.position.set(0,50,-400),this.add(this.mesh,this.mesh2,this.light)}}class a extends THREE.Group{constructor(){super();const e=new THREE.SphereBufferGeometry(500,32,32),t=new THREE.ShaderMaterial({uniforms:{t:{type:"c",value:new THREE.Color(2700386)},b:{type:"c",value:new THREE.Color(3809117)}},vertexShader:"\n          varying vec3 v;\n\n          void main() {\n\n            vec4 w = modelMatrix * vec4( position, 1.0 );\n            v = w.xyz;\n    \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n          }\n        ",fragmentShader:"\n          uniform vec3 t;\n          uniform vec3 b;\n          varying vec3 v;\n\n          void main()\n            {\n              vec3 p = normalize(v.xyz);\n              float f = sin(p.y * 2.0);\n\n              gl_FragColor = vec4(mix(t,b, f ), 1.0);\n            }\n        ",side:THREE.BackSide});this.sky=new THREE.Mesh(e,t),this.add(this.sky)}}let h,c,l,u,p,d,m,f,E,g,y,w,v=[],b=()=>{x();let e="left"===v[0].direction?-20:20,t={x:v[0].group.position.x+e,y:v[0].group.position.y};(w=new o(l,c,t,b,{pathLength:1e3,tacoDistance:-500,burgerDistances:[-6,3,4,5,6,7],planeDistances:[]})).initPlane(),w.init(),v.push(w),p.add(v[1].group);let i={x:t.x-v[0].group.position.x,y:t.y-v[0].group.position.y};c.changeDirection(v[0].direction,i),setTimeout(()=>{p.remove(v[0].group),v.shift(),v[0].playGame()},300)},T=()=>{g=window.localStorage.getItem("iwmbbr"),document.querySelector("#score").innerHTML=0,document.querySelector("#hi-score").innerHTML=g||0,c.score=0},R=()=>{let e=new THREE.OctahedronGeometry(1.5);e.scale(.7,1,.7);let t=new THREE.MeshLambertMaterial({color:15277667,flatShading:THREE.FlatShading});c=new class{constructor(e,t){this.mesh=new THREE.Mesh(e,t),this.mesh.castShadow=!0,this.mesh.position.set(0,5,-25),this.mesh.rotation.x=.485,this.gravity=.01,this.bounceValue=0,this.spinValue=0,this.spinDirection="left",this.spinning=!1,this.spinAvailable=!0,this.turn=!1,this.heroBaseY=1.8,this.heroBaseX=0,this.score=0}spin(e){this.spinAvailable&&(this.spinAvailable=!1,this.spinDirection=e,this.spinning=!0,this.mesh.rotation.y+=.4,this.jumping=!0,this.bounceValue=.15)}jump(){this.jumping=!0,this.bounceValue=.2}changeDirection(e,t){this.turn=!0,this.turnDirection=e,this.posDelta=t,this.heroBaseX+=t.x}update(){if(this.spinning&&(10<Math.abs(this.mesh.rotation.y)?(this.mesh.rotation.y=0,this.spinValue=0,this.spinning=!1):"left"===this.spinDirection?this.spinValue=-.4:this.spinValue=.4),this.turn){if(this.mesh.position.x!==this.heroBaseX)return this.heroBaseY+=this.posDelta.y/10,void(this.mesh.position.x+=this.posDelta.x/10);this.turn=!1}this.mesh.position.y<=this.heroBaseY?this.jumping?this.jumping=!1:(this.bounceValue=0,this.spinning=!1):this.bounceValue-=this.gravity,this.mesh.position.y=Math.max(this.mesh.position.y+this.bounceValue,this.heroBaseY),this.mesh.rotation.y+=this.spinValue}}(e,t),(u=new THREE.Object3D).position.set(0,2,-2),c.mesh.add(u),(l=new THREE.Object3D).add(c.mesh),p.add(l),window.addEventListener("keydown",()=>{37===event.keyCode?c.spin("left"):39===event.keyCode&&c.spin("right"),c.mesh.position.y>c.heroBaseY||38===event.keyCode&&c.jump()})},H=()=>{let e;c.update(),v.forEach(t=>{!t.paused&&t.group.position.z<1e3&&(t.group.position.z+=2,e=t.detectCollisions())}),e&&(()=>{let e=document.querySelector("#restart");g=c.score>g?c.score:g,window.localStorage.setItem("iwmbbr",g),v[0].pauseGame(),e.classList.remove("hidden")})(),c.turn?(d.position.y=c.mesh.position.y+3,d.position.z=c.mesh.position.z+40):d.position.y=10,d.position.x=c.mesh.position.x},M=()=>{h.setAnimationLoop(()=>{h.render(p,d),H()})},S=()=>{E=window.innerHeight,f=window.innerWidth,h.setSize(f,E),d.aspect=f/E,d.updateProjectionMatrix()},x=()=>{v[0].pauseGame()},j=()=>{c.spinning=!1,c.jumping=!1,c.spinValue=0,v[0].init(),v[0].playGame(),T(),H(),c.mesh.rotation.z=0};(()=>{let e=document.querySelector("#game");THREE.ImageUtils.crossOrigin="",f=window.innerWidth,E=window.innerHeight,(h=new THREE.WebGLRenderer({canvas:e})).setSize(f,E),h.antialias=!0,h.setClearColor(16777215,1),h.shadowMap.enabled=!0,h.shadowMapSoft=!0,p=new THREE.Scene,(d=new THREE.PerspectiveCamera(45,f/E,1,3e3)).position.set(0,10,0);let t=new THREE.DirectionalLight(16777215,1);t.position.set(-1,1,0);let i=new THREE.HemisphereLight(16758605,3622735,1);i.position.y=500,R(),T(),(()=>{let e=new a;y=new r,p.add(e,y)})(),d.lookAt(c.mesh.position);let n={pathLength:1e3,tacoDistance:-500,burgerDistances:[-3,-4,-5,-6,-7,-8,-9,-10],planeDistances:[0,1,2,3,4,5,6,7,8,9,10]};(w=new o(l,c,{x:0,y:0,z:0},b,n)).initPlane(),v.push(w),(m=new THREE.Group).add(d),p.add(m,t,i,v[0].group),M();let s=document.querySelector("#start"),u=document.querySelector("#restart");s.onclick=()=>{j(),s.classList.add("hidden")},u.onclick=()=>{p.remove(v[0].group),v.shift();let e={x:c.mesh.position.x,y:0,z:0};(w=new o(l,c,e,b,n)).initPlane(),v.push(w),p.add(w.group),j(),u.classList.add("hidden")},window.addEventListener("resize",S),S(),document.body.appendChild(THREE.WEBVR.createButton(h)),h.vr.enabled=!0})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,